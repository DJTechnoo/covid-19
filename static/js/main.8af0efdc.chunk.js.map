{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","getDate","str","Date","toDateString","className","styles","container","Grid","spacing","item","component","Card","xs","md","cx","card","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","url","fetchData","a","axios","get","fetchDailyData","modData","map","daily","total","date","reportDate","fetchCountryData","country","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","CountryPicker","countryHandler","setCountries","FormControl","NativeSelect","onChange","e","target","key","App","state","countryhandler","fetchedData","setState","this","style","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8af0efdc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2jWA1\",\"card\":\"Cards_card__3ObEk\",\"confirmed\":\"Cards_confirmed__3sTMd\",\"recovered\":\"Cards_recovered__38jp7\",\"deaths\":\"Cards_deaths__2Jrvh\"};","import React from 'react';\r\nimport {Card, CardContent, Grid, Typography} from '@material-ui/core';\r\nimport CountUp from 'react-countup'; \r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n\r\n    const getDate = str => {\r\n        return new Date(str).toDateString();\r\n    }\r\n\r\n\r\n    if(!confirmed || !recovered || !deaths || !lastUpdate){\r\n        return <h1>LOADING...</h1>;\r\n    }\r\n\r\n    return (    \r\n        <div className={styles.container}>\r\n            <Grid container spacing={3}>\r\n                <Grid item component={Card} xs={12} md={3} \r\n                className={cx(styles.card, styles.confirmed)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Confirmed</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={1} separator=','>\r\n                                {confirmed.value}\r\n                            </CountUp>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{getDate(lastUpdate)}</Typography>\r\n                        <Typography variant=\"body2\">Number of confirmed cases</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} \r\n                className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={1} separator=','>\r\n                                {recovered.value}\r\n                            </CountUp>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{getDate(lastUpdate)}</Typography>\r\n                        <Typography variant=\"body2\">Number of recovered people</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} \r\n                className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={1} separator=','>\r\n                                {deaths.value}\r\n                            </CountUp>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{getDate(lastUpdate)}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\n\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async () => {\r\n    try {\r\n        const {\r\n            data: {\r\n                deaths, \r\n                confirmed, \r\n                recovered, \r\n                lastUpdate\r\n            }\r\n        } = await axios.get(url);\r\n\r\n        return {deaths, confirmed, recovered, lastUpdate};\r\n\r\n    } catch (err) {\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const modData = data.map(daily => ({\r\n            confirmed: daily.confirmed.total,\r\n            deaths: daily.deaths.total,\r\n            date: daily.reportDate\r\n        }));\r\n\r\n        return modData;\r\n    } catch (err) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchCountryData = async country => {\r\n    try {\r\n        const {\r\n            data: {\r\n                deaths, \r\n                confirmed, \r\n                recovered, \r\n                lastUpdate\r\n            }\r\n        } = await axios.get(`${url}/countries/${country}`);\r\n        \r\n\r\n        return {deaths, confirmed, recovered, lastUpdate};\r\n\r\n    } catch (err) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    const {data: {countries}} = await axios.get(`${url}/countries`);\r\n    return countries.map(country => (country.name));\r\n}","import React, {useState, useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\n\r\nconst Chart = () => {\r\n\r\n\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData())\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [])\r\n\r\n\r\n    const lineChart = (\r\n        \r\n        dailyData.length ? (\r\n            <Line\r\n            data={{\r\n                labels: dailyData.map(({date})=> date),\r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed})=> confirmed),\r\n                    label: 'confirmed',\r\n                    borderColor: '#3333ff',\r\n                    fill: true\r\n                }, {\r\n                    data: dailyData.map(({deaths})=> deaths),\r\n                    label: 'deaths',\r\n                    borderColor: 'lightred',\r\n                    fill: true,\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)'\r\n                }]\r\n            }}\r\n            />) : null \r\n    );\r\n\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {lineChart}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chart;","import React, {useEffect, useState} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetchCountries} from '../../api/';\r\n\r\nconst CountryPicker = ({countryHandler}) => {\r\n\r\n    const [countries, setCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setCountries([\"global\", ...await fetchCountries()])\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <FormControl className={styles.container}>\r\n            <NativeSelect onChange={(e)=>countryHandler(e.target.value)}>{\r\n                countries.map(\r\n                    (country)=>(\r\n                        <option \r\n                        key={country} \r\n                        value={country}>\r\n                            {country}\r\n                        </option>))    \r\n            }\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport Cards from './components/Cards/Cards';\r\nimport Chart from './components/Chart/Chart';\r\nimport CountryPicker from './components/CountryPicker/CountryPicker';\r\n\r\nimport {fetchData, fetchCountryData} from './api';\r\n\r\nimport style from './App.module.css';\r\n\r\nclass App extends React.Component{\r\n\r\n    state = {\r\n        data: {},\r\n        country: \"global\"\r\n    };\r\n\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData();\r\n        this.setState({data: fetchedData});\r\n    }\r\n\r\n\r\n    countryhandler = async country =>{\r\n        // 1 Fetch\r\n        let fetchedData = null;\r\n        if(country == \"global\")\r\n            fetchedData = await fetchData();\r\n        else \r\n            fetchedData = await fetchCountryData(country);\r\n        this.setState({data: fetchedData})\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className={style.container}>\r\n                <h1>COVID-19 Tracker</h1>\r\n                <Cards data={this.state.data}/>\r\n                <CountryPicker countryHandler={this.countryhandler}/>\r\n                <Chart/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root')); ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1NcTH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1K35H\"};"],"sourceRoot":""}